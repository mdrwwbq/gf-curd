package src

import (
	"encoding/base64"
	"encoding/json"
	"os"
	"path/filepath"
)

var (
	templateContent = map[string]string{}
)

func init() {
	getTemplateData()
}

// GetDefaultTemplateContent 获取模板内容
func GetDefaultTemplateContent(fileName string) string {
	return templateContent[filepath.Base(fileName)]
}

func getTemplateData() {
	templateData := ``
	if baseDeContent, err := base64.StdEncoding.DecodeString(templateData); err != nil {
		panic(err)
	} else {
		if err := json.Unmarshal([]byte(baseDeContent), &templateContent); err != nil {
			panic(err)
		}
	}
}

// listPath 开发环境使用，用于遍历模板文件的内容处理后配合getTemplateData()使用
func listPath() {
	// 开发环境下遍历模板文件夹，读取模板内容
	filepath.Walk("./template", func(path string, info os.FileInfo, err error) error {
		if err != nil {
			panic(err)
		}
		if !info.IsDir() {
			if con, err := os.ReadFile(path); err != nil {
				panic(err)
			} else {
				templateContent[filepath.Base(path)] = string(con)
			}
		}
		return nil
	})
	if con, err := json.Marshal(templateContent); err != nil {
		panic(err)
	} else {
		//fmt.Println(con)
		file, _ := os.OpenFile("./template/out.txt", os.O_CREATE|os.O_WRONLY, 0666)
		_, err := file.WriteString(base64.StdEncoding.EncodeToString(con))
		if err != nil {
			panic(err)
		}
	}
}
